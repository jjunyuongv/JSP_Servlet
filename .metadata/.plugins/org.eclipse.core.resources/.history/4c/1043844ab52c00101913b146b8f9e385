package model1.board;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Vector;

import common.JDBConnect;
import jakarta.servlet.ServletContext;

public class BoardDAO extends JDBConnect
{
	
	
	public BoardDAO(ServletContext application)
	{
		super(application);
	}

	
	public int selectCount (Map<String, Object> map)
	{
		int totalCount = 0;
		
		String query = "SELECT COUNT(*) FROM board";
		if (map.get("searchWord") != null)
		{
			query += " WHERE " + map.get("searchField") +" "
					+ " LIKE '%" + map.get("searchWord") + "%'";
		}
		
		try
		{
			stmt = con.createStatement();
			rs = stmt.executeQuery(query);
			rs.next();
			totalCount = rs.getInt(1);
		} catch (Exception e)
		{
			System.out.println("게시물 수를 구하는 중 예외 발생");
			e.printStackTrace();
		}
		return totalCount;
	}
	
	public List<BoardDTO> selectList(Map<String, Object> map)
	{
		List<BoardDTO> bbs = new Vector<BoardDTO>();
		
		String query = "SELECT * FROM board ";
		if (map.get("searchWord") !=null)
		{
			query += " WHERE " + map.get("searchField") +" "
					+ " LIKE '%" + map.get("searchWord") + "%' ";
		}
		query += " ORDER BY num DESC ";
		
		try
		{
			stmt = con.createStatement();
			rs = stmt.executeQuery(query);
			
			while (rs.next())
			{
				BoardDTO dto = new BoardDTO();
				
				dto.setNum(rs.getString("num"));
				dto.setTitle(rs.getString("title"));
				dto.setContent(rs.getString("content"));
				dto.setPostdate(rs.getDate("postdate"));
				dto.setId(rs.getString("id"));
				dto.setVisitcount(rs.getString("visitcount"));
				
				bbs.add(dto);
			}
		} catch (Exception e)
		{
			System.out.println("게시물 조회 중 예외 발생");
			e.printStackTrace();
		}
		return bbs;
	}
	
	public int insertWrite(BoardDTO dto)
	{
		int result = 0;
		
		try
		{
			String query = "INSERT INTO board ( "
						+ " num,title,content,id,visitcount) "
						+ " VALUES ( "
						+ " seq_board_num.NEXTVAL, ?, ?, ?, 0)";
			
			psmt = con.prepareStatement(query);
			psmt.setString(1, dto.getTitle());
			psmt.setString(2, dto.getContent());
			psmt.setString(3, dto.getId());
			
			result = psmt.executeUpdate();
		} catch (Exception e)
		{
			System.out.println("게시물 입력 중 예외 발생");
			e.printStackTrace();
		}
		return result;
	}
	
	public BoardDTO selectView(String num)
	{
		BoardDTO dto = new BoardDTO();
		
		String query = "SELECT B.*, M.name "
					+ " FROM member M INNER JOIN board B "
					+ " ON M.id=B.id "
					+ " WHERE num=?";
		
		try
		{
			psmt = con.prepareStatement(query);
			psmt.setString(1, num);
			rs = psmt.executeQuery();
			
			if (rs.next())
			{
				dto.setNum(rs.getString(1));
				dto.setTitle(rs.getString(2));
				dto.setContent(rs.getString("content"));
				dto.setPostdate(rs.getDate("postdate"));
				dto.setId(rs.getString("id"));
				dto.setVisitcount(rs.getString(6));
				dto.setName(rs.getString("name"));
			}
			
		} catch (Exception e)
		{
			System.out.println("게시물 상세보기 중 예외 발생");
			e.printStackTrace();
		}
		
		return dto;
	}
	
	public void updateVisitCount(String num)
	{
		String query = "UPDATE board SET "
					+ " visitcount=visitcount+1 "
					+ " WHERE num=?";
		
		try
		{
			psmt = con.prepareStatement(query);
			psmt.setString(1, num);
			psmt.executeQuery();
		} catch (Exception e)
		{
			System.out.println("게시물 조회수 증가 중 예외 발생");
			e.printStackTrace();
		}
	}
	
	public int updateEdit(BoardDTO dto)
	{
		int result = 0;
		
		try
		{
			String query = "UPDATE board SET "
						+ " title=?, content=? "
						+ " WHERE num=?";
			
			psmt = con.prepareStatement(query);
			psmt.setString(1, dto.getTitle());
			psmt.setString(2, dto.getContent());
			psmt.setString(3, dto.getNum());
			
			result = psmt.executeUpdate();
		} catch (Exception e)
		{
			System.out.println("계시물 수정 중 예외 발생");
			e.printStackTrace();
		}
		
		return result;
	}
	
	
	public int deletePost(BoardDTO dto)
	{
		int result = 0;
		
		try
		{
			String query = "DELETE FROM board WHERE num=?";
			
			psmt = con.prepareStatement(query);
			psmt.setString(1, dto.getNum());
			
			result = psmt.executeUpdate();
		} catch (Exception e)
		{
			System.out.println("계시물 삭제 중 예외 발생");
			e.printStackTrace();
		}
		
		return result;
	}
	
	
	 // 게시물 목록 출력시 페이징 기능 추가
    public List<BoardDTO> selectListPage(Map<String, Object> map)
    {
    	List<BoardDTO> bbs = new ArrayList<BoardDTO>();
    	/*
	      	검색조건에 일치하는 게시물을 얻어온 후 각페이지에 출력할 구간까지
	      	설정한 서브 쿼리문 작성
	     */
    	String query = "SELECT * FROM ( "
    			+ "    SELECT Tb.*, ROWNUM rNum FROM ( "
    			+ "        SELECT * FROM board ";
    	// 검색어가 있는 경우에만 where을 추가한다.
    	if(map.get("searchWord") != null)
		{
			query += " WHERE " + map.get("searchField") + " "
					+ " LIKE '%" + map.get("searchWord") +"%' ";
		}
    	// between을 통해 게시물의 구간을 결정할 수 있다.
    	query += "     ORDER BY num DESC "
    			+ "    ) Tb "
    			+ "  )  "
    			+ " WHERE rNum BETWEEN ? AND ?";
    	/*
	      	between 절 대신 비교연산자를 통해 쿼리문을 구성할수도 있다.
	      	=> where rNum>=? and rNum<=?
	     */
    	
    	try
		{
    		// 인파라미터가 있는 쿼리문이므로 prepared객체를 생성한다.
    		psmt = con.prepareStatement(query);
    		// 인파라미터를 설정한다. 구간의 시작과 끝을 계산한 값이다.
    		psmt.setString(1, map.get("start").toString());
    		psmt.setString(2, map.get("end").toString());
    		// 쿼리문을 실행하고 결과 레코드를 ResultSet으로 반환받는다.
    		rs = psmt.executeQuery();
    		// 결과 레코드의 갯수만큼 반복하여 List컬렉션에 저장한다.
    		while (rs.next())
			{
				BoardDTO dto = new BoardDTO();
				
				dto.setNum(rs.getString("num"));
				dto.setTitle(rs.getString("title"));
				dto.setContent(rs.getString("content"));
				dto.setPostdate(rs.getDate("postdate"));
				dto.setId(rs.getString("id"));
				dto.setVisitcount(rs.getString("visitcount"));
				
				bbs.add(dto);
			}
		} catch (Exception e)
		{
			System.out.println("게시물 조회 중 예외 발생");
            e.printStackTrace();
		}
    	
    	return bbs;
    }
	 
	
}